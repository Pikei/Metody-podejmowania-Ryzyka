procedure f(x[])
    return 2 * (x[0] - 1.5)^2 + 2 * x[0] * x[1] + (x[1] - 0.5)^2 - 3
end procedure

procedure fPrim(x[], index)
    if (index == 0)
        return 4 * x[0] - 6 + 2 * x[1]
    else if (index == length(x)-1)
        return 2 * x[length(x) - 2] + 2 * x[length(x) - 1] - 1;
    else
        else return 0
end procedure

procedure fPrimSteff(k, x[])
    result = 0
    for i from 0 to length(x) - 1
        if (i == 0)
            result = result + (2*2*g[0](x[0]-g[0]*k-1.5) + 2*g[1](x[1]-g[1]*k))
        else if (i == length(x)-1)
            result = result + (2*g[i-1] * (x[i-1]-g[i-1]*k) + 2*g[i](x[i]-g[i]*k-0.5))
        else
            result = result + 0
    return result
end procedure


procedure Steffensen(k, x[])
    licznik = (fPrimSteff(k, x[]))^2
    mianownik = fPrimSteff(k + fPrimSteff(k, x[]), x[]) - fPrimSteff(k, x[])
    return k - (licznik / mianownik)
end procedure


procedure NajszybszySpadek()
    x = [2];
    xNew = [length(x)];
    g = [length(x)];
    k = 0.5;
    for i from 0 to length(x) - 1
        x[i] = 1
    end for
    do
        for i from 0 to length(xNew) - 1
            xNew[i] = x[i]
        end for
        for i from 0 to length(g) - 1
            g[i] = fPrim(x, i)
        end for
        k = Steffensen(k, xNew)
        for i from 0 to length(xNew) - 1
            xNew[i] = x[i] - k*g[i]
        end for
    while not warunek stopu
end procedure