procedure f(x[])
    return 2 * (x[0] - 1.5)^2 + 2 * x[0] * x[1] + (x[1] - 0.5)^2 - 3
end procedure

procedure fPrim(x[], index)
    if (index == 0)
        return 4 * x[0] - 6 + 2 * x[1]
    else if (index == length(x)-1)
        return 2 * x[length(x) - 2] + 2 * x[length(x) - 1] - 1;
    else
        return 0
end procedure

procedure fZloty(x[], k)
    return 2 * ((x[0]+k) - 1.5)^2 + 2 * (x[0]+k) * (x[1]+k) + ((x[1]+k) - 0.5)^2 - 3
end procedure

procedure zlotyPodzial(x[])
    k = (1+sqrt(5)) / 2;
    a = -100
    b = 100
    xl = b - k * (b - a);
    xr = a + k * (b - a);
    e = 0.02
    while (b-a) > e do
        if  fZloty(x, xl) < fZloty(x, xr)
            b = xr
            xr = xl
            xl = b - k * (b - a)
        else
            a = xl;
            xl = xr;
            xr = a + k * (b - a);
    end while
    return (a + b) / 2
end procedure

procedure Gauss()
    x = [2, 2]
    xNew = [length(x)]
    for i from 0 to length(x) - 1
        x[i] = 1
    end for
    do
        for i from 0 to length(xNew) - 1
            xNew[i] = x[i]
            k = zlotyPodzial(xNew)
            until fPrim(xNew, i) > -e AND fPrim(xNew, i) < e
                xNew[i] = x[i] + k
                if f(x) < f(xNew)
                    xNew[i] = x[i] - 2*k
                else if f(x) < f(xNew)
                    xNew[i] = x[i]
            end until
            x[i] = xNew[i]
        end for
    while NOT warunek stopu
end procedure